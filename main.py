import logging
import asyncio
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ConversationHandler, ContextTypes, CallbackQueryHandler
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime, timedelta

# ==== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ====
logging.basicConfig(level=logging.INFO)

# ==== –ù–ê–°–¢–†–û–ô–ö–ò ====
TOKEN = "7339504860:AAEFEXix0Q10SSWSzDk6mfOfVOdwsRnrras"
SPREADSHEET_ID = "1npURWdH4IkFp3C01ZAmLS4PZyhRXqzy-tvmD7QqSNvA"
SHEET_NAME = "–ó–∞—è–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞"
MASTER_SHEET = "–ú–∞—Å—Ç–µ—Ä–∞"
ADMIN_CHAT_ID = "6126002181"

# ==== –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Google –¢–∞–±–ª–∏—Ü—ã ====
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
client = gspread.authorize(creds)
sheet = client.open_by_key(SPREADSHEET_ID).worksheet(SHEET_NAME)
master_sheet = client.open_by_key(SPREADSHEET_ID).worksheet(MASTER_SHEET)

# ==== –°–æ—Å—Ç–æ—è–Ω–∏—è ====
NAME, PHONE, SERVICE, MASTER, RESTART_CONFIRMATION = range(5)
user_data_dict = {}
CANCEL_HINT = "\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ /cancel, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É."

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data_dict[update.effective_chat.id] = {"chat_id": update.effective_chat.id}
    context.user_data.clear()
    await update.message.reply_text("\U0001F44B –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ –æ—Ñ–æ—Ä–º–∏–º –∑–∞—è–≤–∫—É.\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:" + CANCEL_HINT)
    return NAME

async def name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data_dict[update.effective_chat.id]["–ò–º—è"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:" + CANCEL_HINT)
    return PHONE

async def phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data_dict[update.effective_chat.id]["–¢–µ–ª–µ—Ñ–æ–Ω"] = update.message.text.strip()
    values = master_sheet.get_all_values()
    data = values[1:]
    services = sorted(set(row[0].strip() for row in data if len(row) > 0 and row[0].strip()))
    reply_keyboard = [services[i:i+2] for i in range(0, len(services), 2)]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:" + CANCEL_HINT, reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True))
    return SERVICE

async def service(update: Update, context: ContextTypes.DEFAULT_TYPE):
    selected_service = update.message.text.strip()
    user_data_dict[update.effective_chat.id]["–£—Å–ª—É–≥–∞"] = selected_service
    values = master_sheet.get_all_values()
    data = values[1:]
    matched_masters = [row[1].strip() for row in data if len(row) >= 2 and row[0].strip().lower() == selected_service.lower() and row[1].strip()]
    matched_masters = sorted(set(matched_masters))
    if not matched_masters:
        await update.message.reply_text("\U0001F614 –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–π —É—Å–ª—É–≥–∏." + CANCEL_HINT)
        return ConversationHandler.END
    reply_keyboard = [matched_masters[i:i+2] for i in range(0, len(matched_masters), 2)]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:" + CANCEL_HINT, reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True))
    return MASTER

async def master(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data_dict[update.effective_chat.id]["–ú–∞—Å—Ç–µ—Ä"] = update.message.text.strip()
    return await ask_date(update, context)

async def ask_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    today = datetime.today()
    buttons = []
    for i in range(7):
        date_obj = today + timedelta(days=i)
        day_str = date_obj.strftime("%a %d.%m")
        date_str = date_obj.strftime("%d.%m.%Y")
        buttons.append(InlineKeyboardButton(f"{day_str}", callback_data=f"date|{date_str}"))
    keyboard = [buttons[i:i+3] for i in range(0, len(buttons), 3)]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=InlineKeyboardMarkup(keyboard))
    return ConversationHandler.END

async def time_manual_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    data = user_data_dict.get(chat_id, {})

    if "–î–∞—Ç–∞" in data and "–í—Ä–µ–º—è" not in data:
        data["–í—Ä–µ–º—è"] = update.message.text.strip()
        data["–í—Ä–µ–º—è –∑–∞—è–≤–∫–∏"] = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
        user_data_dict[chat_id] = data

        headers = sheet.row_values(1)
        row_data = [data.get(header, "") for header in headers]
        sheet.append_row(row_data)

        master_values = master_sheet.get_all_values()
        matched_chat_id = None
        for row in master_values[1:]:
            if len(row) >= 3 and row[1].strip().lower() == data["–ú–∞—Å—Ç–µ—Ä"].strip().lower():
                matched_chat_id = row[2]
                break

        message = f"\U0001F4EC *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!*\n–ò–º—è: {data['–ò–º—è']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {data['–¢–µ–ª–µ—Ñ–æ–Ω']}\n–£—Å–ª—É–≥–∞: {data['–£—Å–ª—É–≥–∞']}\n–ú–∞—Å—Ç–µ—Ä: {data['–ú–∞—Å—Ç–µ—Ä']}\n–î–∞—Ç–∞: {data['–î–∞—Ç–∞']}\n–í—Ä–µ–º—è: {data['–í—Ä–µ–º—è']}"
        try:
            matched_chat_id = int(str(matched_chat_id).strip())
            await context.bot.send_message(chat_id=matched_chat_id, text=message, parse_mode="Markdown")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–∞—Å—Ç–µ—Ä—É: {e}")
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text="[–ö–æ–ø–∏—è –∞–¥–º–∏–Ω—É]\n" + message)

        reply_keyboard = [["–î–∞"], ["–ù–µ—Ç"]]
        await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –µ—â—ë –æ–¥–Ω—É?", reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True))

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_keyboard = [["–î–∞"], ["–ù–µ—Ç"]]
    await update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?", reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True))
    return RESTART_CONFIRMATION

async def restart_decision(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.strip().lower() == "–¥–∞":
        return await start(update, context)
    else:
        await update.message.reply_text("–•–æ—Ä–æ—à–æ, –µ—Å–ª–∏ —á—Ç–æ ‚Äî —è –∑–¥–µ—Å—å \U0001F4AC\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ /start.")
        return ConversationHandler.END

async def fallback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏, –≤–≤–µ–¥–∏—Ç–µ /start –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \U0001F4DD –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É")

async def myid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    await update.message.reply_text(f"–í–∞—à Chat ID: `{chat_id}`", parse_mode="Markdown")

async def handle_feedback_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data.split("|")
    if data[0] == "feedback":
        row_num = int(data[1])
        rating = data[2]
        try:
            sheet.update_cell(row_num, sheet.find("–û—Ü–µ–Ω–∫–∞").col, rating)
            await query.edit_message_text("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –æ—Ü–µ–Ω–∫–∏: {e}")
            await query.edit_message_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à—É –æ—Ü–µ–Ω–∫—É.")
    elif data[0] == "date":
        selected_date = data[1]
        chat_id = update.effective_chat.id
        user_data_dict[chat_id]["–î–∞—Ç–∞"] = selected_date
        await query.edit_message_text(f"üìÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: *{selected_date}*", parse_mode="Markdown")
        await context.bot.send_message(chat_id=chat_id, text="–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15:00):")

async def request_feedback(application):
    while True:
        try:
            values = sheet.get_all_values()
            headers = values[0]
            data = values[1:]
            for i, row in enumerate(data, start=2):
                row_dict = dict(zip(headers, row))
                if not all(k in row_dict for k in ["–î–∞—Ç–∞", "–í—Ä–µ–º—è", "chat_id"]):
                    continue
                if row_dict.get("–û—Ü–µ–Ω–∫–∞"):
                    continue
                dt_str = f"{row_dict['–î–∞—Ç–∞']} {row_dict['–í—Ä–µ–º—è']}"
                try:
                    appointment_time = datetime.strptime(dt_str, "%d.%m.%Y %H:%M")
                    now = datetime.now()
                    if timedelta(minutes=115) < now - appointment_time <= timedelta(minutes=125):
                        chat_id = int(row_dict["chat_id"])
                        service = row_dict.get("–£—Å–ª—É–≥–∞", "—É—Å–ª—É–≥–∞")
                        master = row_dict.get("–ú–∞—Å—Ç–µ—Ä", "–º–∞—Å—Ç–µ—Ä")
                        msg = f"\U0001F4DD –ö–∞–∫ –≤–∞–º —É—Å–ª—É–≥–∞ '{service}' –æ—Ç –º–∞—Å—Ç–µ—Ä–∞ {master}?\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5:"
                        keyboard = [[
                            InlineKeyboardButton("‚≠ê1", callback_data=f"feedback|{i}|1"),
                            InlineKeyboardButton("‚≠ê2", callback_data=f"feedback|{i}|2"),
                            InlineKeyboardButton("‚≠ê3", callback_data=f"feedback|{i}|3"),
                            InlineKeyboardButton("‚≠ê4", callback_data=f"feedback|{i}|4"),
                            InlineKeyboardButton("‚≠ê5", callback_data=f"feedback|{i}|5")
                        ]]
                        await application.bot.send_message(chat_id=chat_id, text=msg, reply_markup=InlineKeyboardMarkup(keyboard))
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞: {e}")
        except Exception as e:
            logging.error(f"–¶–∏–∫–ª –æ—Ç–∑—ã–≤–æ–≤: {e}")
        await asyncio.sleep(600)

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone)],
            SERVICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, service)],
            MASTER: [MessageHandler(filters.TEXT & ~filters.COMMAND, master)],
            RESTART_CONFIRMATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, restart_decision)]
        },
        fallbacks=[CommandHandler("cancel", cancel), MessageHandler(filters.ALL, fallback)]
    )
    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("myid", myid))
    app.add_handler(CallbackQueryHandler(handle_feedback_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, time_manual_handler))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start.")
    loop = asyncio.get_event_loop()
    loop.create_task(request_feedback(app))
    loop.run_until_complete(app.run_polling())


